<#/*THIS IS A T4 FILE*/#>
<#@ template language="C#" #>
<#@ output extension=".gen.cs" #>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Unity.Burst;
using Unity.Collections;

namespace InfPoints
{

    public static partial class Logger
    {
<#
    var SIZES = new int[]{32,64,128,512,4096};
    foreach (var BYTES in SIZES) 
    {
      var MAXLENGTH = BYTES - 2;
#>

<#
        var TYPES = new string[] {"int", "float", "in FixedString32"};
        for(var arg0 = 0; arg0 < 3; ++arg0)
        {
            var t0 = TYPES[arg0];        
#>

   		[BurstDiscard]
   		[System.Diagnostics.Conditional(LOGGER_SYMBOL)]
   		public static void LogFormat(FixedString<#=BYTES#> messageFormatString, <#=t0#> a)
   		{
   			var message = FixedString.Format(messageFormatString, a);
   			UnityEngine.Debug.Log(message.ToString());
   		}

<#
            for(var arg1 = 0; arg1 < 3; ++arg1)
            {
                var t1 = TYPES[arg1];
#>
   		
        [BurstDiscard]
   		[System.Diagnostics.Conditional(LOGGER_SYMBOL)]
   		public static void LogFormat(FixedString<#=BYTES#> messageFormatString, <#=t0#> a, <#=t1#> b)
   		{
   			var message = FixedString.Format(messageFormatString, a, b);
   			UnityEngine.Debug.Log(message.ToString());
   		}

<#

                for(var arg2 = 0; arg2 < 3; ++arg2)
                {
                    var t2 = TYPES[arg2];
#>

        [BurstDiscard]
   		[System.Diagnostics.Conditional(LOGGER_SYMBOL)]
   		public static void LogFormat(FixedString<#=BYTES#> messageFormatString, <#=t0#> a, <#=t1#> b, <#=t2#> c)
   		{
   			var message = FixedString.Format(messageFormatString, a, b, c);
   			UnityEngine.Debug.Log(message.ToString());
   		}

                <#}#>
            <#}#>
        <#}#>
    <#}#>

    }
}