<#/*THIS IS A T4 FILE*/#>
<#@ template language="C#" #>
<#@ output extension=".gen.cs" #>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Unity.Burst;
using Unity.Collections;
using Unity.Jobs;
using Unity.Mathematics;

// Disable warnings due to naming with numeric types and generated members not being used
// ReSharper disable InconsistentNaming
// ReSharper disable MemberCanBePrivate.Global
// ReSharper disable UnassignedField.Global
// ReSharper disable UnusedType.Global

/// ParallelFor Jobs for simple addition of numbers to elements of NativeArrays.
/// Each numeric type of Unity.Mathematics is supported; double, float, int and uint.
/// Each dimension is supported 2,3,4,2x2,2x3,2x4, etc.
namespace InfPoints.Jobs 
{
<#
var TYPES = new []{"double","float","int","uint"};
foreach (var TYPE in TYPES)
{
    for (int i = 1; i <= 4; i++)
    {
        for (int j = 1; j <= 4; j++)
        {
            string NUM1 = i==1 ? "" : i.ToString();
            if (i == 1 && j > 1) break;
            string SEP = j==1 ? "" : "x";
            string NUM2 = j==1 ? "" : j.ToString();
            var TYPE_FULL = $"{TYPE}{NUM1}{SEP}{NUM2}";
#>
    /// Add a number to every element of a NativeArray.
    /// The addition is done in place.
    [BurstCompile(FloatPrecision.Standard, FloatMode.Fast, CompileSynchronously = true)]
    public struct AdditionJob_<#=TYPE_FULL#> : IJobParallelFor
    {
        [ReadOnly] public <#=TYPE_FULL#> NumberToAdd;
        public NativeArray<<#=TYPE_FULL#>> Values;

        public void Execute(int index)
        {
            Values[index] += NumberToAdd;
        }
    }

<#
        }
    }
}
#>
}