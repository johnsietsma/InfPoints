<#/*THIS IS A T4 FILE*/#>
<#@ template language="C#" #>
<#@ output extension=".gen.cs" #>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Unity.Burst;
using Unity.Collections;
using Unity.Jobs;
using Unity.Mathematics;

// Disable warnings due to naming with numeric types and generated members not being used
// ReSharper disable InconsistentNaming
// ReSharper disable MemberCanBePrivate.Global
// ReSharper disable UnassignedField.Global
// ReSharper disable UnusedType.Global

namespace InfPoints 
{
<#
var TYPES = new []{"double","float"};
foreach (var TYPE in TYPES)
{
    for (int DIM = 1; DIM <= 4; DIM++)
    {
        for (int SIGNED = 0; SIGNED < 2; SIGNED++)
        {
            string NUM = DIM == 1 ? "" : DIM.ToString();
            var TYPE_FULL = $"{TYPE}{NUM}";
            var SIGNED_PREFIX = SIGNED == 0 ? "" : "u";
            var QUOTIENT = $"{SIGNED_PREFIX}int{NUM}";
#>
    /// Divide all the values in the array by a divisor, storing the quotient.
    /// Jobs have a name format of `IntegerDivision_<ValuesType>_<QuotientType>`.
    /// For example `IntegerDivision_float3_uint3`.
    [BurstCompile(FloatPrecision.Standard, FloatMode.Fast, CompileSynchronously = true)]
    public struct IntegerDivisionJob_<#=TYPE_FULL #>_<#=QUOTIENT #> : IJobParallelFor
    {
        [ReadOnly] public <#=TYPE_FULL #> Divisor;
        [ReadOnly] public NativeArray<<#=TYPE_FULL #>> Values;
        public NativeArray<<#=QUOTIENT #>> Quotients;

        public void Execute(int index)
        {
            Quotients[index] = (<#=QUOTIENT #>) math.floor(Values[index] / Divisor);
        }
    }

<#
        }
    }
}
#>
}