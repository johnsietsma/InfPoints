
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using InfPoints.Jobs;
using NUnit.Framework;
using Unity.Collections;
using Unity.Jobs;
using Unity.Mathematics;

// Disable warnings due to naming with numeric types and generated members not being used
// ReSharper disable IdentifierTypo
// ReSharper disable InconsistentNaming
// ReSharper disable MemberCanBePrivate.Global
// ReSharper disable UnassignedField.Global
// ReSharper disable UnusedType.Global

namespace InfPoints.Tests.Editor.Jobs
{
    public class IntegerDivisionTests
    {

        [Test]
        public void IntegerDivisionGivesTheCorrectResult_double_int()
        {
            double[] values = {1, 5, 9};
            int[] quotients = {0, 2, 4};
            double divisor = 2;
            using (var valuesArray = new NativeArray<double>(values, Allocator.Persistent))
            using (var quotientsArray = new NativeArray<int>(valuesArray.Length, Allocator.Persistent))
            {
                var divideJob = new IntegerDivisionJob_double_int()
                {
                    Values = valuesArray,
                    Quotients = quotientsArray,
                    Divisor = divisor
                };

                var divideJobHandle = divideJob.Schedule(valuesArray.Length, 4);
                divideJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(quotientsArray[i], Is.EqualTo(quotients[i]));
                }
            }
        }

        [Test]
        public void IntegerDivisionGivesTheCorrectResult_double_uint()
        {
            double[] values = {1, 5, 9};
            uint[] quotients = {0, 2, 4};
            double divisor = 2;
            using (var valuesArray = new NativeArray<double>(values, Allocator.Persistent))
            using (var quotientsArray = new NativeArray<uint>(valuesArray.Length, Allocator.Persistent))
            {
                var divideJob = new IntegerDivisionJob_double_uint()
                {
                    Values = valuesArray,
                    Quotients = quotientsArray,
                    Divisor = divisor
                };

                var divideJobHandle = divideJob.Schedule(valuesArray.Length, 4);
                divideJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(quotientsArray[i], Is.EqualTo(quotients[i]));
                }
            }
        }

        [Test]
        public void IntegerDivisionGivesTheCorrectResult_double2_int2()
        {
            double2[] values = {1, 5, 9};
            int2[] quotients = {0, 2, 4};
            double2 divisor = 2;
            using (var valuesArray = new NativeArray<double2>(values, Allocator.Persistent))
            using (var quotientsArray = new NativeArray<int2>(valuesArray.Length, Allocator.Persistent))
            {
                var divideJob = new IntegerDivisionJob_double2_int2()
                {
                    Values = valuesArray,
                    Quotients = quotientsArray,
                    Divisor = divisor
                };

                var divideJobHandle = divideJob.Schedule(valuesArray.Length, 4);
                divideJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(quotientsArray[i], Is.EqualTo(quotients[i]));
                }
            }
        }

        [Test]
        public void IntegerDivisionGivesTheCorrectResult_double2_uint2()
        {
            double2[] values = {1, 5, 9};
            uint2[] quotients = {0, 2, 4};
            double2 divisor = 2;
            using (var valuesArray = new NativeArray<double2>(values, Allocator.Persistent))
            using (var quotientsArray = new NativeArray<uint2>(valuesArray.Length, Allocator.Persistent))
            {
                var divideJob = new IntegerDivisionJob_double2_uint2()
                {
                    Values = valuesArray,
                    Quotients = quotientsArray,
                    Divisor = divisor
                };

                var divideJobHandle = divideJob.Schedule(valuesArray.Length, 4);
                divideJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(quotientsArray[i], Is.EqualTo(quotients[i]));
                }
            }
        }

        [Test]
        public void IntegerDivisionGivesTheCorrectResult_double3_int3()
        {
            double3[] values = {1, 5, 9};
            int3[] quotients = {0, 2, 4};
            double3 divisor = 2;
            using (var valuesArray = new NativeArray<double3>(values, Allocator.Persistent))
            using (var quotientsArray = new NativeArray<int3>(valuesArray.Length, Allocator.Persistent))
            {
                var divideJob = new IntegerDivisionJob_double3_int3()
                {
                    Values = valuesArray,
                    Quotients = quotientsArray,
                    Divisor = divisor
                };

                var divideJobHandle = divideJob.Schedule(valuesArray.Length, 4);
                divideJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(quotientsArray[i], Is.EqualTo(quotients[i]));
                }
            }
        }

        [Test]
        public void IntegerDivisionGivesTheCorrectResult_double3_uint3()
        {
            double3[] values = {1, 5, 9};
            uint3[] quotients = {0, 2, 4};
            double3 divisor = 2;
            using (var valuesArray = new NativeArray<double3>(values, Allocator.Persistent))
            using (var quotientsArray = new NativeArray<uint3>(valuesArray.Length, Allocator.Persistent))
            {
                var divideJob = new IntegerDivisionJob_double3_uint3()
                {
                    Values = valuesArray,
                    Quotients = quotientsArray,
                    Divisor = divisor
                };

                var divideJobHandle = divideJob.Schedule(valuesArray.Length, 4);
                divideJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(quotientsArray[i], Is.EqualTo(quotients[i]));
                }
            }
        }

        [Test]
        public void IntegerDivisionGivesTheCorrectResult_double4_int4()
        {
            double4[] values = {1, 5, 9};
            int4[] quotients = {0, 2, 4};
            double4 divisor = 2;
            using (var valuesArray = new NativeArray<double4>(values, Allocator.Persistent))
            using (var quotientsArray = new NativeArray<int4>(valuesArray.Length, Allocator.Persistent))
            {
                var divideJob = new IntegerDivisionJob_double4_int4()
                {
                    Values = valuesArray,
                    Quotients = quotientsArray,
                    Divisor = divisor
                };

                var divideJobHandle = divideJob.Schedule(valuesArray.Length, 4);
                divideJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(quotientsArray[i], Is.EqualTo(quotients[i]));
                }
            }
        }

        [Test]
        public void IntegerDivisionGivesTheCorrectResult_double4_uint4()
        {
            double4[] values = {1, 5, 9};
            uint4[] quotients = {0, 2, 4};
            double4 divisor = 2;
            using (var valuesArray = new NativeArray<double4>(values, Allocator.Persistent))
            using (var quotientsArray = new NativeArray<uint4>(valuesArray.Length, Allocator.Persistent))
            {
                var divideJob = new IntegerDivisionJob_double4_uint4()
                {
                    Values = valuesArray,
                    Quotients = quotientsArray,
                    Divisor = divisor
                };

                var divideJobHandle = divideJob.Schedule(valuesArray.Length, 4);
                divideJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(quotientsArray[i], Is.EqualTo(quotients[i]));
                }
            }
        }

        [Test]
        public void IntegerDivisionGivesTheCorrectResult_float_int()
        {
            float[] values = {1, 5, 9};
            int[] quotients = {0, 2, 4};
            float divisor = 2;
            using (var valuesArray = new NativeArray<float>(values, Allocator.Persistent))
            using (var quotientsArray = new NativeArray<int>(valuesArray.Length, Allocator.Persistent))
            {
                var divideJob = new IntegerDivisionJob_float_int()
                {
                    Values = valuesArray,
                    Quotients = quotientsArray,
                    Divisor = divisor
                };

                var divideJobHandle = divideJob.Schedule(valuesArray.Length, 4);
                divideJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(quotientsArray[i], Is.EqualTo(quotients[i]));
                }
            }
        }

        [Test]
        public void IntegerDivisionGivesTheCorrectResult_float_uint()
        {
            float[] values = {1, 5, 9};
            uint[] quotients = {0, 2, 4};
            float divisor = 2;
            using (var valuesArray = new NativeArray<float>(values, Allocator.Persistent))
            using (var quotientsArray = new NativeArray<uint>(valuesArray.Length, Allocator.Persistent))
            {
                var divideJob = new IntegerDivisionJob_float_uint()
                {
                    Values = valuesArray,
                    Quotients = quotientsArray,
                    Divisor = divisor
                };

                var divideJobHandle = divideJob.Schedule(valuesArray.Length, 4);
                divideJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(quotientsArray[i], Is.EqualTo(quotients[i]));
                }
            }
        }

        [Test]
        public void IntegerDivisionGivesTheCorrectResult_float2_int2()
        {
            float2[] values = {1, 5, 9};
            int2[] quotients = {0, 2, 4};
            float2 divisor = 2;
            using (var valuesArray = new NativeArray<float2>(values, Allocator.Persistent))
            using (var quotientsArray = new NativeArray<int2>(valuesArray.Length, Allocator.Persistent))
            {
                var divideJob = new IntegerDivisionJob_float2_int2()
                {
                    Values = valuesArray,
                    Quotients = quotientsArray,
                    Divisor = divisor
                };

                var divideJobHandle = divideJob.Schedule(valuesArray.Length, 4);
                divideJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(quotientsArray[i], Is.EqualTo(quotients[i]));
                }
            }
        }

        [Test]
        public void IntegerDivisionGivesTheCorrectResult_float2_uint2()
        {
            float2[] values = {1, 5, 9};
            uint2[] quotients = {0, 2, 4};
            float2 divisor = 2;
            using (var valuesArray = new NativeArray<float2>(values, Allocator.Persistent))
            using (var quotientsArray = new NativeArray<uint2>(valuesArray.Length, Allocator.Persistent))
            {
                var divideJob = new IntegerDivisionJob_float2_uint2()
                {
                    Values = valuesArray,
                    Quotients = quotientsArray,
                    Divisor = divisor
                };

                var divideJobHandle = divideJob.Schedule(valuesArray.Length, 4);
                divideJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(quotientsArray[i], Is.EqualTo(quotients[i]));
                }
            }
        }

        [Test]
        public void IntegerDivisionGivesTheCorrectResult_float3_int3()
        {
            float3[] values = {1, 5, 9};
            int3[] quotients = {0, 2, 4};
            float3 divisor = 2;
            using (var valuesArray = new NativeArray<float3>(values, Allocator.Persistent))
            using (var quotientsArray = new NativeArray<int3>(valuesArray.Length, Allocator.Persistent))
            {
                var divideJob = new IntegerDivisionJob_float3_int3()
                {
                    Values = valuesArray,
                    Quotients = quotientsArray,
                    Divisor = divisor
                };

                var divideJobHandle = divideJob.Schedule(valuesArray.Length, 4);
                divideJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(quotientsArray[i], Is.EqualTo(quotients[i]));
                }
            }
        }

        [Test]
        public void IntegerDivisionGivesTheCorrectResult_float3_uint3()
        {
            float3[] values = {1, 5, 9};
            uint3[] quotients = {0, 2, 4};
            float3 divisor = 2;
            using (var valuesArray = new NativeArray<float3>(values, Allocator.Persistent))
            using (var quotientsArray = new NativeArray<uint3>(valuesArray.Length, Allocator.Persistent))
            {
                var divideJob = new IntegerDivisionJob_float3_uint3()
                {
                    Values = valuesArray,
                    Quotients = quotientsArray,
                    Divisor = divisor
                };

                var divideJobHandle = divideJob.Schedule(valuesArray.Length, 4);
                divideJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(quotientsArray[i], Is.EqualTo(quotients[i]));
                }
            }
        }

        [Test]
        public void IntegerDivisionGivesTheCorrectResult_float4_int4()
        {
            float4[] values = {1, 5, 9};
            int4[] quotients = {0, 2, 4};
            float4 divisor = 2;
            using (var valuesArray = new NativeArray<float4>(values, Allocator.Persistent))
            using (var quotientsArray = new NativeArray<int4>(valuesArray.Length, Allocator.Persistent))
            {
                var divideJob = new IntegerDivisionJob_float4_int4()
                {
                    Values = valuesArray,
                    Quotients = quotientsArray,
                    Divisor = divisor
                };

                var divideJobHandle = divideJob.Schedule(valuesArray.Length, 4);
                divideJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(quotientsArray[i], Is.EqualTo(quotients[i]));
                }
            }
        }

        [Test]
        public void IntegerDivisionGivesTheCorrectResult_float4_uint4()
        {
            float4[] values = {1, 5, 9};
            uint4[] quotients = {0, 2, 4};
            float4 divisor = 2;
            using (var valuesArray = new NativeArray<float4>(values, Allocator.Persistent))
            using (var quotientsArray = new NativeArray<uint4>(valuesArray.Length, Allocator.Persistent))
            {
                var divideJob = new IntegerDivisionJob_float4_uint4()
                {
                    Values = valuesArray,
                    Quotients = quotientsArray,
                    Divisor = divisor
                };

                var divideJobHandle = divideJob.Schedule(valuesArray.Length, 4);
                divideJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(quotientsArray[i], Is.EqualTo(quotients[i]));
                }
            }
        }
    }
}