
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NUnit.Framework;
using Unity.Collections;
using Unity.Jobs;
using Unity.Mathematics;

// Disable warnings due to naming with numeric types and generated members not being used
// ReSharper disable InconsistentNaming
// ReSharper disable MemberCanBePrivate.Global
// ReSharper disable UnassignedField.Global
// ReSharper disable UnusedType.Global

namespace InfPoints.Tests.Editor
{
    public class AddJobTests
    {


        [Test]
        public void AddingdoubleGivesTheCorrectResult()
        {
            double[] values = new double[] {0, 1, 2};
            using (var valuesArray = new NativeArray<double>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_double()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addingdouble2GivesTheCorrectResult()
        {
            double2[] values = new double2[] {0, 1, 2};
            using (var valuesArray = new NativeArray<double2>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_double2()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addingdouble2x2GivesTheCorrectResult()
        {
            double2x2[] values = new double2x2[] {0, 1, 2};
            using (var valuesArray = new NativeArray<double2x2>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_double2x2()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addingdouble2x3GivesTheCorrectResult()
        {
            double2x3[] values = new double2x3[] {0, 1, 2};
            using (var valuesArray = new NativeArray<double2x3>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_double2x3()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addingdouble2x4GivesTheCorrectResult()
        {
            double2x4[] values = new double2x4[] {0, 1, 2};
            using (var valuesArray = new NativeArray<double2x4>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_double2x4()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addingdouble3GivesTheCorrectResult()
        {
            double3[] values = new double3[] {0, 1, 2};
            using (var valuesArray = new NativeArray<double3>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_double3()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addingdouble3x2GivesTheCorrectResult()
        {
            double3x2[] values = new double3x2[] {0, 1, 2};
            using (var valuesArray = new NativeArray<double3x2>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_double3x2()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addingdouble3x3GivesTheCorrectResult()
        {
            double3x3[] values = new double3x3[] {0, 1, 2};
            using (var valuesArray = new NativeArray<double3x3>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_double3x3()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addingdouble3x4GivesTheCorrectResult()
        {
            double3x4[] values = new double3x4[] {0, 1, 2};
            using (var valuesArray = new NativeArray<double3x4>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_double3x4()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addingdouble4GivesTheCorrectResult()
        {
            double4[] values = new double4[] {0, 1, 2};
            using (var valuesArray = new NativeArray<double4>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_double4()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addingdouble4x2GivesTheCorrectResult()
        {
            double4x2[] values = new double4x2[] {0, 1, 2};
            using (var valuesArray = new NativeArray<double4x2>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_double4x2()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addingdouble4x3GivesTheCorrectResult()
        {
            double4x3[] values = new double4x3[] {0, 1, 2};
            using (var valuesArray = new NativeArray<double4x3>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_double4x3()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addingdouble4x4GivesTheCorrectResult()
        {
            double4x4[] values = new double4x4[] {0, 1, 2};
            using (var valuesArray = new NativeArray<double4x4>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_double4x4()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void AddingfloatGivesTheCorrectResult()
        {
            float[] values = new float[] {0, 1, 2};
            using (var valuesArray = new NativeArray<float>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_float()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addingfloat2GivesTheCorrectResult()
        {
            float2[] values = new float2[] {0, 1, 2};
            using (var valuesArray = new NativeArray<float2>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_float2()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addingfloat2x2GivesTheCorrectResult()
        {
            float2x2[] values = new float2x2[] {0, 1, 2};
            using (var valuesArray = new NativeArray<float2x2>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_float2x2()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addingfloat2x3GivesTheCorrectResult()
        {
            float2x3[] values = new float2x3[] {0, 1, 2};
            using (var valuesArray = new NativeArray<float2x3>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_float2x3()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addingfloat2x4GivesTheCorrectResult()
        {
            float2x4[] values = new float2x4[] {0, 1, 2};
            using (var valuesArray = new NativeArray<float2x4>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_float2x4()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addingfloat3GivesTheCorrectResult()
        {
            float3[] values = new float3[] {0, 1, 2};
            using (var valuesArray = new NativeArray<float3>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_float3()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addingfloat3x2GivesTheCorrectResult()
        {
            float3x2[] values = new float3x2[] {0, 1, 2};
            using (var valuesArray = new NativeArray<float3x2>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_float3x2()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addingfloat3x3GivesTheCorrectResult()
        {
            float3x3[] values = new float3x3[] {0, 1, 2};
            using (var valuesArray = new NativeArray<float3x3>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_float3x3()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addingfloat3x4GivesTheCorrectResult()
        {
            float3x4[] values = new float3x4[] {0, 1, 2};
            using (var valuesArray = new NativeArray<float3x4>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_float3x4()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addingfloat4GivesTheCorrectResult()
        {
            float4[] values = new float4[] {0, 1, 2};
            using (var valuesArray = new NativeArray<float4>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_float4()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addingfloat4x2GivesTheCorrectResult()
        {
            float4x2[] values = new float4x2[] {0, 1, 2};
            using (var valuesArray = new NativeArray<float4x2>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_float4x2()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addingfloat4x3GivesTheCorrectResult()
        {
            float4x3[] values = new float4x3[] {0, 1, 2};
            using (var valuesArray = new NativeArray<float4x3>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_float4x3()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addingfloat4x4GivesTheCorrectResult()
        {
            float4x4[] values = new float4x4[] {0, 1, 2};
            using (var valuesArray = new NativeArray<float4x4>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_float4x4()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void AddingintGivesTheCorrectResult()
        {
            int[] values = new int[] {0, 1, 2};
            using (var valuesArray = new NativeArray<int>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_int()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addingint2GivesTheCorrectResult()
        {
            int2[] values = new int2[] {0, 1, 2};
            using (var valuesArray = new NativeArray<int2>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_int2()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addingint2x2GivesTheCorrectResult()
        {
            int2x2[] values = new int2x2[] {0, 1, 2};
            using (var valuesArray = new NativeArray<int2x2>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_int2x2()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addingint2x3GivesTheCorrectResult()
        {
            int2x3[] values = new int2x3[] {0, 1, 2};
            using (var valuesArray = new NativeArray<int2x3>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_int2x3()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addingint2x4GivesTheCorrectResult()
        {
            int2x4[] values = new int2x4[] {0, 1, 2};
            using (var valuesArray = new NativeArray<int2x4>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_int2x4()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addingint3GivesTheCorrectResult()
        {
            int3[] values = new int3[] {0, 1, 2};
            using (var valuesArray = new NativeArray<int3>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_int3()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addingint3x2GivesTheCorrectResult()
        {
            int3x2[] values = new int3x2[] {0, 1, 2};
            using (var valuesArray = new NativeArray<int3x2>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_int3x2()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addingint3x3GivesTheCorrectResult()
        {
            int3x3[] values = new int3x3[] {0, 1, 2};
            using (var valuesArray = new NativeArray<int3x3>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_int3x3()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addingint3x4GivesTheCorrectResult()
        {
            int3x4[] values = new int3x4[] {0, 1, 2};
            using (var valuesArray = new NativeArray<int3x4>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_int3x4()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addingint4GivesTheCorrectResult()
        {
            int4[] values = new int4[] {0, 1, 2};
            using (var valuesArray = new NativeArray<int4>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_int4()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addingint4x2GivesTheCorrectResult()
        {
            int4x2[] values = new int4x2[] {0, 1, 2};
            using (var valuesArray = new NativeArray<int4x2>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_int4x2()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addingint4x3GivesTheCorrectResult()
        {
            int4x3[] values = new int4x3[] {0, 1, 2};
            using (var valuesArray = new NativeArray<int4x3>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_int4x3()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addingint4x4GivesTheCorrectResult()
        {
            int4x4[] values = new int4x4[] {0, 1, 2};
            using (var valuesArray = new NativeArray<int4x4>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_int4x4()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void AddinguintGivesTheCorrectResult()
        {
            uint[] values = new uint[] {0, 1, 2};
            using (var valuesArray = new NativeArray<uint>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_uint()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addinguint2GivesTheCorrectResult()
        {
            uint2[] values = new uint2[] {0, 1, 2};
            using (var valuesArray = new NativeArray<uint2>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_uint2()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addinguint2x2GivesTheCorrectResult()
        {
            uint2x2[] values = new uint2x2[] {0, 1, 2};
            using (var valuesArray = new NativeArray<uint2x2>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_uint2x2()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addinguint2x3GivesTheCorrectResult()
        {
            uint2x3[] values = new uint2x3[] {0, 1, 2};
            using (var valuesArray = new NativeArray<uint2x3>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_uint2x3()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addinguint2x4GivesTheCorrectResult()
        {
            uint2x4[] values = new uint2x4[] {0, 1, 2};
            using (var valuesArray = new NativeArray<uint2x4>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_uint2x4()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addinguint3GivesTheCorrectResult()
        {
            uint3[] values = new uint3[] {0, 1, 2};
            using (var valuesArray = new NativeArray<uint3>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_uint3()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addinguint3x2GivesTheCorrectResult()
        {
            uint3x2[] values = new uint3x2[] {0, 1, 2};
            using (var valuesArray = new NativeArray<uint3x2>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_uint3x2()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addinguint3x3GivesTheCorrectResult()
        {
            uint3x3[] values = new uint3x3[] {0, 1, 2};
            using (var valuesArray = new NativeArray<uint3x3>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_uint3x3()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addinguint3x4GivesTheCorrectResult()
        {
            uint3x4[] values = new uint3x4[] {0, 1, 2};
            using (var valuesArray = new NativeArray<uint3x4>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_uint3x4()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addinguint4GivesTheCorrectResult()
        {
            uint4[] values = new uint4[] {0, 1, 2};
            using (var valuesArray = new NativeArray<uint4>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_uint4()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addinguint4x2GivesTheCorrectResult()
        {
            uint4x2[] values = new uint4x2[] {0, 1, 2};
            using (var valuesArray = new NativeArray<uint4x2>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_uint4x2()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addinguint4x3GivesTheCorrectResult()
        {
            uint4x3[] values = new uint4x3[] {0, 1, 2};
            using (var valuesArray = new NativeArray<uint4x3>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_uint4x3()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }

        [Test]
        public void Addinguint4x4GivesTheCorrectResult()
        {
            uint4x4[] values = new uint4x4[] {0, 1, 2};
            using (var valuesArray = new NativeArray<uint4x4>(values, Allocator.Persistent))
            {
                var addJob = new AddJob_uint4x4()
                {
                    Data = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(valuesArray.Length, 4);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }
    }
}