<# /*THIS IS A T4 FILE*/ #>
<#@ template language="C#" #>
<#@ output extension=".gen.cs" #>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NUnit.Framework;
using Unity.Collections;
using Unity.Jobs;
using Unity.Mathematics;

// Disable warnings due to naming with numeric types and generated members not being used
// ReSharper disable IdentifierTypo
// ReSharper disable InconsistentNaming
// ReSharper disable MemberCanBePrivate.Global
// ReSharper disable UnassignedField.Global
// ReSharper disable UnusedType.Global

namespace InfPoints.Tests.Editor
{
    public class IntegerDivisionTests
    {
<#
            var TYPES = new[] {"double", "float"};
            foreach (var TYPE in TYPES)
            {
                for (int DIM = 1; DIM <= 4; DIM++)
                {
                    for (int SIGNED = 0; SIGNED < 2; SIGNED++)
                    {
                        string NUM = DIM == 1 ? "" : DIM.ToString();
                        var TYPE_FULL = $"{TYPE}{NUM}";
                        var SIGNED_PREFIX = SIGNED == 0 ? "" : "u";
                        var QUOTIENT = $"{SIGNED_PREFIX}int{NUM}";
#>

        [Test]
        public void IntegerDivisionGivesTheCorrectResult_<#=TYPE_FULL #>_<#=QUOTIENT #>()
        {
            <#=TYPE_FULL #>[] values = {1, 5, 9};
            <#=QUOTIENT #>[] quotients = {0, 2, 4};
            <#=TYPE_FULL #> divisor = 2;
            using (var valuesArray = new NativeArray<<#=TYPE_FULL #>>(values, Allocator.Persistent))
            using (var quotientsArray = new NativeArray<<#=QUOTIENT #>>(valuesArray.Length, Allocator.Persistent))
            {
                var divideJob = new IntegerDivisionJob_<#=TYPE_FULL #>_<#=QUOTIENT #>()
                {
                    Values = valuesArray,
                    Quotients = quotientsArray,
                    Divisor = divisor
                };

                var divideJobHandle = divideJob.Schedule(valuesArray.Length, 4);
                divideJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(quotientsArray[i], Is.EqualTo(quotients[i]));
                }
            }
        }
<#
                    }
                }
            }
#>
    }
}