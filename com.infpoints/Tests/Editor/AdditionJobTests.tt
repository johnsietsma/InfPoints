<# /*THIS IS A T4 FILE*/ #>
<#@ template language="C#" #>
<#@ output extension=".gen.cs" #>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NUnit.Framework;
using Unity.Collections;
using Unity.Collections.LowLevel.Unsafe;
using Unity.Jobs;
using Unity.Mathematics;
using Unity.PerformanceTesting;

// Disable warnings due to naming with numeric types and generated members not being used
// ReSharper disable IdentifierTypo
// ReSharper disable InconsistentNaming
// ReSharper disable MemberCanBePrivate.Global
// ReSharper disable UnassignedField.Global
// ReSharper disable UnusedType.Global

namespace InfPoints.Tests.Editor
{
    public class AddJobTests
    {

        [Test]
        [Performance]
        public void PerformanceAddingFloat()
        {
                const int valuesCount = 5_000_000;
                using (var values = new NativeArray<float>(valuesCount, Allocator.Persistent))
                {
                    Measure.Method(() =>
                    {
                        var addJob = new AdditionJob_float()
                        {
                            Values = values,
                            NumberToAdd = 5
                        };

                        var addJobHandle = addJob.Schedule(values.Length, 1024);
                        addJobHandle.Complete();
                    }).IterationsPerMeasurement(15).Run();
                }
        }
        
        [Test]
        [Performance]
        public void PerformanceAddingFloat4()
        {
            const int valuesCount = 5_000_000;
            using (var values = new NativeArray<float>(valuesCount, Allocator.Persistent))
            {
                var valuesWide = values.Reinterpret<float4>(UnsafeUtility.SizeOf<float>());
                Measure.Method(() =>
                {
                    var addJob = new AdditionJob_float4()
                    {
                        Values = valuesWide,
                        NumberToAdd = 5
                    };

                    var addJobHandle = addJob.Schedule(valuesWide.Length, 1024);
                    addJobHandle.Complete();
                }).IterationsPerMeasurement(15).Run();
            }
        }
<#
            var TYPES = new [] {"double", "float", "int", "uint"};
            foreach (var TYPE in TYPES)
            {
                for (int i = 1; i <= 4; i++)
                {
                    for (int j = 1; j <= 4; j++)
                    {
                        string NUM1 = i == 1 ? "" : i.ToString();
                        if (i == 1 && j > 1) break;
                        string SEP = j == 1 ? "" : "x";
                        string NUM2 = j == 1 ? "" : j.ToString();
                        var TYPE_FULL = $"{TYPE}{NUM1}{SEP}{NUM2}";
#>

        [Test]
        public void AddingGivesTheCorrectResult_<#=TYPE_FULL#>()
        {
            <#=TYPE_FULL#>[] values = new <#=TYPE_FULL#>[] {0, 1, 2};
            using (var valuesArray = new NativeArray<<#=TYPE_FULL#>>(values, Allocator.Persistent))
            {
                var addJob = new AdditionJob_<#=TYPE_FULL#>()
                {
                    Values = valuesArray,
                    NumberToAdd = 5
                };

                var addJobHandle = addJob.Schedule(values.Length, 1024);
                addJobHandle.Complete();

                for (int i = 0; i < values.Length; i++)
                {
                    Assert.That(valuesArray[i], Is.EqualTo(values[i]+addJob.NumberToAdd));
                }
            }
        }
<#
                    }
                }
            }
#>
    }
}